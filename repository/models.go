// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package repository

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ItemUnit string

const (
	ItemUnitG   ItemUnit = "g"
	ItemUnitL   ItemUnit = "l"
	ItemUnitPcs ItemUnit = "pcs"
)

func (e *ItemUnit) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ItemUnit(s)
	case string:
		*e = ItemUnit(s)
	default:
		return fmt.Errorf("unsupported scan type for ItemUnit: %T", src)
	}
	return nil
}

type NullItemUnit struct {
	ItemUnit ItemUnit
	Valid    bool // Valid is true if ItemUnit is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullItemUnit) Scan(value interface{}) error {
	if value == nil {
		ns.ItemUnit, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ItemUnit.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullItemUnit) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ItemUnit), nil
}

type Item struct {
	ID     uuid.UUID
	Name   string
	Amount int32
	Unit   ItemUnit
}

type User struct {
	ID        uuid.UUID
	Username  string
	Password  string
	Email     string
	CreatedAt time.Time
}
